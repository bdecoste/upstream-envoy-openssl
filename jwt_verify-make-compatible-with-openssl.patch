From a7c49b98f312ee52194868b9378d43af3ab11f23 Mon Sep 17 00:00:00 2001
From: Dmitry Rozhkov <dmitry.rozhkov@linux.intel.com>
Date: Wed, 27 Mar 2019 17:51:25 +0200
Subject: [PATCH] make compatible with openssl

---
 BUILD                 |  2 ++
 jwt_verify_lib/jwks.h |  4 ++++
 src/jwks.cc           | 20 ++++++++++++++++----
 src/verify.cc         |  7 +++++--
 4 files changed, 27 insertions(+), 6 deletions(-)

diff --git a/BUILD b/BUILD
index 288ad80..e136055 100644
--- a/BUILD
+++ b/BUILD
@@ -26,6 +26,8 @@ cc_library(
         "//external:abseil_time",
         "//external:protobuf",
         "//external:ssl",
+        "@envoy_openssl//boringssl_compat:bssl_compat_cbs_lib",
+        "@envoy_openssl//boringssl_compat:bssl_compat_lib",
     ],
 )
 
diff --git a/jwt_verify_lib/jwks.h b/jwt_verify_lib/jwks.h
index f426687..e15512a 100644
--- a/jwt_verify_lib/jwks.h
+++ b/jwt_verify_lib/jwks.h
@@ -22,6 +22,10 @@
 #include "openssl/ec.h"
 #include "openssl/evp.h"
 
+#ifndef OPENSSL_IS_BORINGSSL
+#include "boringssl_compat/bssl.h"
+#endif
+
 namespace google {
 namespace jwt_verify {
 
diff --git a/src/jwks.cc b/src/jwks.cc
index 0603294..6f5576b 100644
--- a/src/jwks.cc
+++ b/src/jwks.cc
@@ -27,6 +27,11 @@
 #include "openssl/rsa.h"
 #include "openssl/sha.h"
 
+#ifndef OPENSSL_IS_BORINGSSL
+#include "boringssl_compat/cbs.h"
+using namespace Envoy::Extensions::Common::Cbs;
+#endif
+
 namespace google {
 namespace jwt_verify {
 
@@ -119,18 +124,25 @@ class EvpPkeyGetter : public WithStatus {
   bssl::UniquePtr<RSA> createRsaFromJwk(const std::string& n,
                                         const std::string& e) {
     bssl::UniquePtr<RSA> rsa(RSA_new());
-    rsa->n = createBigNumFromBase64UrlString(n).release();
-    rsa->e = createBigNumFromBase64UrlString(e).release();
-    if (rsa->n == nullptr || rsa->e == nullptr) {
+    BIGNUM* n_bn;
+    BIGNUM* e_bn;
+    n_bn = createBigNumFromBase64UrlString(n).release();
+    e_bn = createBigNumFromBase64UrlString(e).release();
+    if (n_bn == nullptr || e_bn == nullptr) {
       // RSA public key field is missing or has parse error.
       updateStatus(Status::JwksRsaParseError);
       return nullptr;
     }
-    if (BN_cmp_word(rsa->e, 3) != 0 && BN_cmp_word(rsa->e, 65537) != 0) {
+    if (BN_cmp_word(e_bn, 3) != 0 && BN_cmp_word(e_bn, 65537) != 0) {
       // non-standard key; reject it early.
       updateStatus(Status::JwksRsaParseError);
       return nullptr;
     }
+    if (!RSA_set0_key(rsa.get(), n_bn, e_bn, NULL)) {
+      // can't set RSA key; reject it early.
+      updateStatus(Status::JwksRsaParseError);
+      return nullptr;
+    }
     return rsa;
   }
 };
diff --git a/src/verify.cc b/src/verify.cc
index 535f31a..2fa2932 100644
--- a/src/verify.cc
+++ b/src/verify.cc
@@ -77,8 +77,11 @@ bool verifySignatureEC(EC_KEY* key, const uint8_t* signature,
     return false;
   }
 
-  if (BN_bin2bn(signature, 32, ecdsa_sig->r) == nullptr ||
-      BN_bin2bn(signature + 32, 32, ecdsa_sig->s) == nullptr) {
+  const BIGNUM* r_bn;
+  const BIGNUM* s_bn;
+  ECDSA_SIG_get0(ecdsa_sig.get(), &r_bn, &s_bn);
+  if (BN_bin2bn(signature, 32, const_cast<BIGNUM *>(r_bn)) == nullptr ||
+      BN_bin2bn(signature + 32, 32, const_cast<BIGNUM *>(s_bn)) == nullptr) {
     return false;
   }
   if (ECDSA_do_verify(digest, SHA256_DIGEST_LENGTH, ecdsa_sig.get(), key) ==
-- 
2.20.1

